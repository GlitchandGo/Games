<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Pixel Duel</title>
  <style>
    /* Global Style */
    body {
      margin: 0;
      padding: 0;
      background-color: #f3e1a3; /* sandy yellow for day */
      font-family: 'Courier New', Courier, monospace;
      color: #333;
      text-align: center;
      position: relative;
    }
    /* Settings Menu (always at top right) */
    #settings {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
      font-size: 24px;
      z-index: 1000;
    }
    #settings-menu {
      display: none;
      position: absolute;
      top: 40px;
      right: 10px;
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
      font-size: 14px;
      text-align: left;
      z-index: 1000;
    }
    #settings-menu label {
      display: block;
      margin: 5px 0;
    }
    /* Main screens */
    .screen {
      display: none;
      padding-top: 100px;
      position: relative;
      height: 100vh;
    }
    /* Button styling */
    .btn {
      padding: 10px 20px;
      margin: 10px;
      border: none;
      background-color: #8B4513;
      color: white;
      font-size: 18px;
      cursor: pointer;
      border-radius: 5px;
    }
    .btn:hover {
      background-color: #A0522D;
    }
    /* Game signal styling */
    #signal {
      font-size: 48px;
      margin-top: 100px;
    }
  </style>
</head>
<body>
  <!-- Settings Menu -->
  <div id="settings">
    &#9881;
    <div id="settings-menu">
      <div>
        <strong>Difficulty</strong><br>
        <label><input type="radio" name="difficulty" value="easy" checked> Easy</label>
        <label><input type="radio" name="difficulty" value="medium"> Medium</label>
        <label><input type="radio" name="difficulty" value="hard"> Hard</label>
        <label><input type="radio" name="difficulty" value="extreme"> Extreme</label>
      </div>
      <div>
        <strong>Time of Day</strong><br>
        <label><input type="radio" name="timeOfDay" value="day" checked> Day</label>
        <label><input type="radio" name="timeOfDay" value="night"> Night</label>
      </div>
      <div>
        <strong>Global Leaderboard (Fastest Reaction Times)</strong>
        <table border="1" style="width:100%; text-align:center; margin-top:5px;">
          <tr><th>Name</th><th>Time (s)</th></tr>
          <!-- Player's best row: will update with the chosen username and best time -->
          <tr id="playerBestRow">
            <td id="playerUsername">Player</td>
            <td id="bestScore">-</td>
          </tr>
          <tr><td>IAmInevitable</td><td>0.008</td></tr>
          <tr><td>NoThisIsPatrick</td><td>0.016</td></tr>
          <tr><td>tralalerotralala</td><td>0.018</td></tr>
<tr><td>getwecked</td><td>0.023</td></tr>
<tr><td>iamballerinacappuchina</td><td>0.025</td></tr>
<tr><td>hacker</td><td>0.027</td></tr>
<tr><td>beatmymeat</td><td>0.030</td></tr>
<tr><td>timourwalk</td><td>0.033</td></tr>
<tr><td>coolkid</td><td>0.033</td></tr>
<tr><td>bot1</td><td>0.036</td></tr>
<tr><td>Skibidigyat</td><td>0.038</td></tr>
<tr><td>bigbuttbarry</td><td>0.039</td></tr>
<tr><td>kafuti</td><td>0.039</td></tr>
<tr><td>player</td><td>0.040</td></tr>
<tr><td>bonana</td><td>0.042</td></tr>
<tr><td>ihatemylife</td><td>0.043</td></tr>
<tr><td>balls</td><td>0.044</td></tr>
          <tr><td>???</td><td>0.000</td></tr>
        </table>
      </div>
    </div>
  </div>

  <!-- Main Menu Screen -->
  <div id="main-menu" class="screen" style="display:block;">
    <h1>Pixel Duel</h1>
    <div id="username-container">
      <label for="username">Username: </label>
      <input type="text" id="username" placeholder="Enter your username" value="Player">
    </div>
    <button class="btn" id="normalModeBtn">Normal Mode</button>
    <button class="btn" id="highNoonModeBtn">High Noon Mode</button>
  </div>

  <!-- Player Selection Screen -->
  <div id="player-select" class="screen">
    <h2>Select Number of Players</h2>
    <button class="btn" id="onePlayerBtn">1 Player</button>
    <button class="btn" id="twoPlayerBtn">2 Players</button>
  </div>

  <!-- Game Screen -->
  <div id="game-screen" class="screen">
    <!-- Wins/Losses Tracker at top left -->
    <div id="score-tracker" style="position:absolute; top:10px; left:10px; font-size:20px;">
      Wins: 0 | Losses: 0
    </div>
    <div id="game-info">
      <p>Get Ready...</p>
    </div>
    <div id="signal"></div>
    <!-- Timer at bottom (hidden until real signal appears) -->
    <div id="timer" style="position:absolute; bottom:10px; width:100%; text-align:center; font-size:24px; display:none;">
      0 ms
    </div>
  </div>

  <!-- Audio Elements (replace src values with appropriate audio files) -->
  <audio id="bgMusic" src="bgmusic.mp3" loop></audio>
  <audio id="bangSound" src="bang.mp3"></audio>

  <script>
    /* Global Variables */
    let mode = "";              // "normal" or "highnoon"
    let players = 0;            // 1 or 2 players
    let gameStarted = false;
    let wins = 0, losses = 0, p1Wins = 0, p2Wins = 0;
    let bestReactionTime = Infinity; // Lower is better (in ms)
    let reactionStartTime = 0;
    let timerInterval = null;
    let reacted = false;
    let currentSignalIsFake = false;
    let aiTimeoutID = null;
    
    // Fake signal words (for false signals)
    const fakeSignals = ["Yee-haw", "Shoe", "Oops", "Cheese", "Kafuti", "Horsey"];

    /* ----------------- Settings Menu Logic ----------------- */

    // Toggle settings menu display
    const gear = document.getElementById('settings');
    const settingsMenu = document.getElementById('settings-menu');
    gear.addEventListener('click', () => {
      settingsMenu.style.display = (settingsMenu.style.display === "block") ? "none" : "block";
    });

    // Update difficulty setting
    document.getElementsByName('timeOfDay').forEach(radio => {
  radio.addEventListener('change', (e) => {
    timeOfDay = e.target.value;
    console.log("Time of Day set to:", timeOfDay);

    // Update background image based on selection
    document.body.style.backgroundImage = timeOfDay === "night"
      ? "url('images/Copilot_20250531_124955....png')"  // Your nighttime image
      : "url('images/Copilot_20250531_124742....png')";  // Your daytime image
  });
});
    // Update time of day setting and change background accordingly
    document.getElementsByName('timeOfDay').forEach(radio => {
      radio.addEventListener('change', (e) => {
        timeOfDay = e.target.value;
        console.log("Time of Day set to:", timeOfDay);
        if (timeOfDay === "night") {
          document.body.style.backgroundColor = "#1a1a1a"; // dark for night
          document.body.style.color = "#f3e1a3";
        } else {
          document.body.style.backgroundColor = "#f3e1a3"; // sandy yellow for day
          document.body.style.color = "#333";
        }
      });
    });

    /* ----------------- Main Menu Logic ----------------- */
    // Default difficulty (if not changed via settings)
    let difficulty = "easy";
    let timeOfDay = "day";

    document.getElementById('normalModeBtn').addEventListener('click', () => {
      mode = "normal";
      showPlayerSelect();
    });
    document.getElementById('highNoonModeBtn').addEventListener('click', () => {
      mode = "highnoon";
      showPlayerSelect();
    });

    function showPlayerSelect() {
      document.getElementById('main-menu').style.display = "none";
      document.getElementById('player-select').style.display = "block";
    }
    
    // Update username in leaderboard when changed
    const usernameInput = document.getElementById("username");
    usernameInput.addEventListener("input", updateLeaderboard);

    /* ----------------- Player Selection ----------------- */
    document.getElementById('onePlayerBtn').addEventListener('click', () => {
      players = 1;
      startGame();
    });
    document.getElementById('twoPlayerBtn').addEventListener('click', () => {
      players = 2;
      startGame();
    });

    /* ----------------- Game Screen Logic ----------------- */
    function startGame() {
      // Reset scores for new game
      wins = 0; losses = 0; p1Wins = 0; p2Wins = 0;
      updateScoreTracker();
      
      document.getElementById('player-select').style.display = "none";
      document.getElementById('game-screen').style.display = "block";
      // Begin playing background music
      document.getElementById('bgMusic').play();
      gameStarted = true;
      
      // Start the first round after a random delay (between 1s and 5s)
      let delay = Math.random() * 4000 + 1000;
      setTimeout(showSignal, delay);
    }

    // Timer functions: start and stop the reaction timer
    function startTimer() {
      reactionStartTime = performance.now();
      const timerEl = document.getElementById("timer");
      timerEl.style.display = "block";
      timerEl.textContent = "0 ms";
      timerInterval = setInterval(() => {
        let elapsed = performance.now() - reactionStartTime;
        timerEl.textContent = elapsed.toFixed(0) + " ms";
      }, 10);
    }

    function stopTimer() {
      clearInterval(timerInterval);
      document.getElementById("timer").style.display = "none";
    }

    // Update the wins/losses or players score tracker
    function updateScoreTracker() {
      const trackerEl = document.getElementById("score-tracker");
      if (players === 1) {
        trackerEl.textContent = "Wins: " + wins + " | Losses: " + losses;
      } else if (players === 2) {
        trackerEl.textContent = "Player 1 Wins: " + p1Wins + " | Player 2 Wins: " + p2Wins;
      }
    }

    // Update the leaderboard player's row with the current username and best reaction time
    function updateLeaderboard() {
      const playerName = document.getElementById("username").value || "Player";
      document.getElementById("playerUsername").textContent = playerName;
      // Convert bestReactionTime from ms to seconds (3 decimal places)
      document.getElementById("bestScore").textContent = (bestReactionTime === Infinity ? "-" : (bestReactionTime/1000).toFixed(3) + " s");
    }

    // Global reaction handler for a round. Defined inside showSignal so it has access to the current round's values.
    function showSignal() {
      reacted = false;
      currentSignalIsFake = false;
      const signalEl = document.getElementById('signal');

      // Determine signal type
      if (mode === "normal") {
        let chance = (difficulty === "easy") ? 0.5 :
                     (difficulty === "medium") ? 0.7 : 0.9;
        currentSignalIsFake = Math.random() < chance;
      } else if (mode === "highnoon") {
        currentSignalIsFake = false;
      }

      // Set text: if fake, display a random fake word; if real, display "Shoot"
      let text = "";
      if (currentSignalIsFake) {
        text = fakeSignals[Math.floor(Math.random() * fakeSignals.length)];
      } else {
        text = "Shoot";
      }
      signalEl.textContent = text;

      // If it's a real signal, start the reaction timer.
      if (!currentSignalIsFake) {
        startTimer();
        // In one-player mode, simulate AI reaction.
        if (players === 1) {
          let aiReactionTime = 0;
          if (difficulty === "easy") {
            aiReactionTime = Math.random() * (600 - 300) + 300;
          } else if (difficulty === "medium") {
            aiReactionTime = Math.random() * (400 - 250) + 250;
          } else if (difficulty === "hard") {
            aiReactionTime = Math.random() * (250 - 100) + 100;
          } else if (difficulty === "extreme") {
            aiReactionTime = Math.random() * (100 - 20) + 20;
          }
          // AI reaction timeout (in milliseconds)
          aiTimeoutID = setTimeout(() => {
            if (!reacted) {
              reacted = true;
              stopTimer();
              losses++;
              updateScoreTracker();
              alert("AI shot faster! AI wins the round!");
              // Start the next round after a brief pause.
              setTimeout(() => { showSignal(); }, 1000);
            }
          }, aiReactionTime);
        }
      }

      // Reaction handling function (for both 1P and 2P).
      const reactionHandler = (e) => {
        if (!reacted) {
          reacted = true;
          // If reacting on a fake signal: it's a penalty.
          if (currentSignalIsFake) {
            // Clear any pending AI timeout.
            if(aiTimeoutID) clearTimeout(aiTimeoutID);
            alert("False alarm! You reacted to a fake signal. You lose this round!");
            losses++;
            updateScoreTracker();
          } else {
            // Real signal: stop timer and get player's reaction time.
            stopTimer();
            const playerReactionTime = performance.now() - reactionStartTime;
            if (players === 1) {
              // In one-player mode, if the player reacts before the AI timeout fires, they win.
              wins++;
              updateScoreTracker();
              alert("Bang! You reacted in " + playerReactionTime.toFixed(0) + " ms. You win this round!");
              // Update best reaction time (lower is better).
              if (playerReactionTime < bestReactionTime) {
                bestReactionTime = playerReactionTime;
                updateLeaderboard();
              }
            } else if (players === 2) {
              // In two-player mode, decide based on which key was pressed.
              if (e.code === "KeyA") {
                p1Wins++;
                updateScoreTracker();
                alert("Player 1 wins the round!");
              } else if (e.code === "KeyL") {
                p2Wins++;
                updateScoreTracker();
                alert("Player 2 wins the round!");
              }
            }
            // Clear AI timeout if it exists.
            if(aiTimeoutID) clearTimeout(aiTimeoutID);
          }
          // Remove the event listener and schedule the next round.
          window.removeEventListener('keydown', reactionHandler);
          setTimeout(() => { showSignal(); }, 1000);
        }
      };

      // Add event listener(s) for reaction.
      if (players === 1) {
        window.addEventListener('keydown', reactionHandler);
      } else if (players === 2) {
        window.addEventListener('keydown', function(e) {
          if (e.code === "KeyA" || e.code === "KeyL") {
            reactionHandler(e);
          }
        });
      }
    }
  </script>
</body>
</html>
